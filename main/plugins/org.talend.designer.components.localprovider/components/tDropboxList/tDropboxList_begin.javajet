<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>

<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node,"__ACCESS_TOKEN__");
	    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";
		String path = ElementParameterParser.getValue(node, "__PATH__");
		String includeSubDir = ElementParameterParser.getValue(node, "__INCLUDSUBDIR__");
%>
<%
if(!"true".equals(useExistingConn)){
	String clientIdentifier = "\""+cid+"\"";
	String localeName = "\""+java.util.Locale.getDefault().toString()+"\"";
	
	String useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__");
	if("true".equals(useProxy)){
		String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
		String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
%>
		com.dropbox.core.DbxRequestConfig <%=cid%>_config = new com.dropbox.core.DbxRequestConfig(<%=clientIdentifier%>, <%=localeName%>
			,new com.dropbox.core.http.StandardHttpRequestor(new java.net.Proxy(java.net.Proxy.Type.HTTP, new java.net.InetSocketAddress(<%=proxyHost%>, <%=proxyPort%>))));
		com.dropbox.core.DbxClient <%=cid%>_client = new com.dropbox.core.DbxClient(<%=cid%>_config, <%=accessToken%>);
<%
	}else{
%>
		com.dropbox.core.DbxRequestConfig <%=cid%>_config = new com.dropbox.core.DbxRequestConfig(<%=clientIdentifier%>, <%=localeName%>);
		com.dropbox.core.DbxClient <%=cid%>_client = new com.dropbox.core.DbxClient(<%=cid%>_config, <%=accessToken%>);
<%
	}
}else{
%>
	com.dropbox.core.DbxClient <%=cid%>_client = (com.dropbox.core.DbxClient)globalMap.get(<%=connectionKey%>);
<%}%>
	com.dropbox.core.DbxEntry.WithChildren <%=cid%>_entries = <%=cid%>_client
			.getMetadataWithChildren(<%=path%>);
	if (<%=cid%>_entries == null) {
		throw new Exception("No File or Directory found at " + <%=path%>);
	}
	java.util.Deque<com.dropbox.core.DbxEntry> <%=cid%>_files = new java.util.ArrayDeque<com.dropbox.core.DbxEntry>();
	if (<%=cid%>_entries.entry.isFile()) {
		<%=cid%>_files.add(<%=cid%>_entries.entry);
	} else if (<%=cid%>_entries.children != null) {
		<%=cid%>_files.addAll(<%=cid%>_entries.children);
	}
	if (!<%=cid%>_files.isEmpty()) {
		com.dropbox.core.DbxEntry <%=cid%>_child = null;
		while( (<%=cid%>_child = <%=cid%>_files.poll()) != null) {
			if (!<%=cid%>_child.isFile()) {
				<%if("true".equals(includeSubDir)){%>
					com.dropbox.core.DbxEntry.WithChildren tmp = <%=cid%>_client.getMetadataWithChildren(<%=cid%>_child.path);
					if(tmp != null && tmp.children != null){
						<%=cid%>_files.addAll(tmp.children);
					}
				<%}%>
				continue;
			}
			
			com.dropbox.core.DbxClient.Downloader <%=cid%>_downloader = <%=cid%>_client.startGetFile(<%=cid%>_child.path, null);
			globalMap.put("<%=cid%>_NAME",<%=cid%>_child.name);
			globalMap.put("<%=cid%>_PATH",<%=cid%>_child.path);
			globalMap.put("<%=cid%>_LAST_MODIFIED",<%=cid%>_child.asFile().lastModified.getTime());
			globalMap.put("<%=cid%>_SIZE",<%=cid%>_child.asFile().numBytes);
			if (<%=cid%>_downloader != null) {
				globalMap.put("<%=cid%>_CONTENT",<%=cid%>_downloader.body);
			}
			try{
			
			
			