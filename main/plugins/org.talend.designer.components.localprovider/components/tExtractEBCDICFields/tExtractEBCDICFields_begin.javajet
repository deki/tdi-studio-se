<%@ jet 
imports="

	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.INode 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.utils.NodeUtil
	
	java.util.ArrayList
	java.util.List
	java.util.Map
"
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
log4jFileUtil.componentStartInfo(node);
String cid = node.getUniqueName();

String field = ElementParameterParser.getValue(node, "__FIELD__");

String dieOnErrorStr = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
boolean dieOnError = (dieOnErrorStr!=null&&!("").equals(dieOnErrorStr))?("true").equals(dieOnErrorStr):false;
String encoding  = ElementParameterParser.getValue(node, "__ENCODING__");
int schemaOptNum=100;
String schemaOptNumStr=ElementParameterParser.getValue(node, "__SCHEMA_OPT_NUM__");
if(schemaOptNumStr!=null && !"".equals(schemaOptNumStr) && !"\"\"".equals(schemaOptNumStr)){
	schemaOptNum  = Integer.parseInt(schemaOptNumStr);
}
List<Map<String, String>> trimSelects = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIMSELECT__");
String isTrimAllStr = ElementParameterParser.getValue(node,"__TRIMALL__");
boolean isTrimAll = (isTrimAllStr!=null&&!("").equals(isTrimAllStr))?("true").equals(isTrimAllStr):true;

IConnection inConn = null;
List< ? extends IConnection> inConns = node.getIncomingConnections();
if(inConns!=null){
    for (IConnection conn : inConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		inConn = conn;
    		break;
    	}
    }
}

String rejectConnName = "";
List<IMetadataColumn> rejectColumnList = null;
List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
if(rejectConns != null && rejectConns.size() > 0) {
    IConnection rejectConn = rejectConns.get(0);
    rejectColumnList = rejectConn.getMetadataTable().getListColumns();
    rejectConnName = rejectConn.getName();
}

IConnection outConn = null;
String firstConnName = "";
List< ? extends IConnection> outConns = node.getOutgoingConnections();
if(outConns!=null){
    for (IConnection conn : outConns) {
    	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		outConn = conn;
    		firstConnName = outConn.getName();
    		break;
    	}
    }
}

%>
	int nb_line_<%=cid%>=0;
	java.nio.ByteBuffer bbRecord_<%=cid %> = null;
	
<%
//set original columns
List<IMetadataColumn> newColumnList = new ArrayList<IMetadataColumn>();
if(outConn!=null && inConn!=null){
	IMetadataTable outputMetadataTable = outConn.getMetadataTable();
	IMetadataTable inputMetadataTable = inConn.getMetadataTable();
	if(outputMetadataTable.getListColumns().size()> schemaOptNum){
%>
	class ExtractEBCDICFieldUtil_<%=cid%>{
<%
		int oirginalColumnsSize=0;
		for (IMetadataColumn outputCol : outputMetadataTable.getListColumns()) {
			if(outputCol.getLabel().equals(field)){
				continue;
			}
			boolean isOirginalColumn = false;
			for(IMetadataColumn inputCol : inputMetadataTable.getListColumns()){	
				JavaType stringType =  JavaTypesManager.getJavaTypeFromId(inputCol.getTalendType());
				if( outputCol.getLabel().equals( inputCol.getLabel()) ){
					if(oirginalColumnsSize%schemaOptNum==0){
%>
			public void putValue_Oirginal_<%=oirginalColumnsSize/schemaOptNum%>(final <%=outConn.getName() %>Struct <%=outConn.getName() %>,final <%=NodeUtil.getPrivateConnClassName(inConn) %>Struct <%=inConn.getName() %>){
<%
					}
					isOirginalColumn = true;
					if(stringType == JavaTypesManager.STRING){
						boolean trimStr = false;
						if(trimSelects!=null){
							for(Map<String, String> mapTrim : trimSelects){
								if(outputCol.getLabel().equals(mapTrim.get("SCHEMA_COLUMN")) && "true".equals(mapTrim.get("TRIM"))){
									trimStr = true;
									break;
								}
							}
						}
%>
					<%=outConn.getName()%>.<%=outputCol.getLabel()%> = <%=inConn.getName()%>.<%=inputCol.getLabel()%><%=(isTrimAll || (!trimSelects.isEmpty() && (trimStr)))?".trim()":"" %>;
<%
					}else{
%>
					<%=outConn.getName()%>.<%=outputCol.getLabel()%> = <%=inConn.getName()%>.<%=inputCol.getLabel()%>;
<%
					}
					if((oirginalColumnsSize+1)%schemaOptNum==0){
%>
			}
<%
					}
					oirginalColumnsSize++;
					break;
				}
			}
			if(!isOirginalColumn){
				if(!("").equals(rejectConnName)&&rejectConnName.equals(firstConnName)
					&& (outputCol.getLabel().equals("errorMessage") || outputCol.getLabel().equals("errorCode"))){
				}else{
					newColumnList.add(outputCol);
				}
			}
		}
			if(oirginalColumnsSize>0&&(oirginalColumnsSize%schemaOptNum)>0){
%>
			}
<%
			}
		for(int valueN = 0 ; valueN < newColumnList.size();valueN++){//----- for begin
				IMetadataColumn column = newColumnList.get(valueN);
				Integer orgainLength = column.getOriginalLength();
				String orgainType = column.getType();
				Integer precision = column.getPrecision();
				if(precision==null) precision = 0;
				if(valueN%schemaOptNum==0){
%>
			public void putValue_unOirginal_<%=valueN/schemaOptNum%>(final <%=outConn.getName() %>Struct <%=outConn.getName() %>,java.nio.ByteBuffer bbRecord_<%=cid %>)throws java.lang.Exception{
<%
				}
				if(orgainLength==null || orgainLength.intValue()==0 || orgainType==null || "".endsWith(orgainType.trim())) {
%>
//////////////////////////////////////////////////
the original size in the column:<%=column.getLabel()%> in the schema should be bigger than 0 and DB Type shouldn't be null or Empty
//////////////////////////////////////////////////
<%
				continue;
				}
%>
			byte[] bb_<%=outConn.getName() %>_<%=column.getLabel()%> = new byte[<%=orgainLength %>];
			bbRecord_<%=cid %>.get(bb_<%=outConn.getName() %>_<%=column.getLabel()%>);
<%
				if(orgainType.equals("X")){
						boolean trimStr = false;
						if(trimSelects!=null){
							for(Map<String, String> mapTrim : trimSelects){
								if(column.getLabel().equals(mapTrim.get("SCHEMA_COLUMN")) && "true".equals(mapTrim.get("TRIM"))){
									trimStr = true;
									break;
								}
							}
						}
%>				
				<%=outConn.getName() %>.<%=column.getLabel()%> = new String(bb_<%=outConn.getName() %>_<%=column.getLabel()%>,<%=encoding%>)<%=(isTrimAll || (!trimSelects.isEmpty() && (trimStr)))?".trim()":"" %>;
<%
				}else if(orgainType.equals("1")) {
%>
				<%=outConn.getName() %>.<%=column.getLabel()%> = new java.lang.Float(java.nio.ByteBuffer.wrap(bb_<%=outConn.getName() %>_<%=column.getLabel()%>).order(java.nio.ByteOrder.BIG_ENDIAN).getFloat());
<%
				}else if(orgainType.equals("2")) {
%>
				<%=outConn.getName() %>.<%=column.getLabel()%> = new java.lang.Double(java.nio.ByteBuffer.wrap(bb_<%=outConn.getName() %>_<%=column.getLabel()%>).order(java.nio.ByteOrder.BIG_ENDIAN).getDouble());
<%
				}else if(orgainType.equals("3") || orgainType.equals("9")) {
					String isImpliedDecimalStr = column.getAdditionalField().get("ImpliedDecimal");
					boolean isImpliedDecimal = (isImpliedDecimalStr!=null&&!("").equals(isImpliedDecimalStr))?("true").equals(isImpliedDecimalStr):true;
					if(orgainType.equals("3")){
%>
					<%=outConn.getName() %>.<%=column.getLabel()%> = cobolConversion.EBCDICType3.readType3Value(bb_<%=outConn.getName() %>_<%=column.getLabel()%>,<%=precision %>,<%=isImpliedDecimal %>);
<%
					}else {
%>
					<%=outConn.getName() %>.<%=column.getLabel()%> = cobolConversion.EBCDICType9.readType9Value(bb_<%=outConn.getName() %>_<%=column.getLabel()%>,<%=precision %>,<%=isImpliedDecimal %>,<%=encoding %>);
<%
					}
				}else if(orgainType.equals("B")) {
%>
				<%=outConn.getName() %>.<%=column.getLabel()%> = new java.math.BigDecimal(new java.math.BigInteger(bb_<%=outConn.getName() %>_<%=column.getLabel()%>),0);
<%
				}else if (orgainType.equals("T")) {
%>
				<%=outConn.getName() %>.<%=column.getLabel()%> = bb_<%=outConn.getName() %>_<%=column.getLabel()%>;
<%
				}else {
%>
//////////////////////////////////////////////////
DB Type of the column:<%=column.getLabel()%> should be X, 1, 2, 3, 9, B, T
//////////////////////////////////////////////////
<%
				}
				if((valueN+1)%schemaOptNum==0){
%>
			}
<%
				}
		}//----- for end
				if(newColumnList.size()>0&&(newColumnList.size()%schemaOptNum)>0){
%>
			}
<%
				}
		if(!dieOnError){
			if(!("").equals(rejectConnName)&&!rejectConnName.equals(firstConnName)&&rejectColumnList != null && rejectColumnList.size() > 0) {
				int outputColumnSize=outConn.getMetadataTable().getListColumns().size();
	            for(int rejectColNo=0;rejectColNo<outputColumnSize;rejectColNo++) {
	            	IMetadataColumn column=outConn.getMetadataTable().getListColumns().get(rejectColNo);
					if(rejectColNo%schemaOptNum==0){
%>
			public void putValue_reject_<%=rejectColNo/schemaOptNum%>(final <%=rejectConnName %>Struct <%=rejectConnName %>,final <%=firstConnName%>Struct <%=firstConnName %>){
<%
					}
%>
    			<%=rejectConnName%>.<%=column.getLabel()%> = <%=firstConnName %>.<%=column.getLabel() %>;
<%
					if((rejectColNo+1)%schemaOptNum==0){
%>
			}
<%
					}
				}
				if(outputColumnSize>0&&(outputColumnSize%schemaOptNum)>0){
%>
			}
<%
				}
			}
		}
%>
	}
	ExtractEBCDICFieldUtil_<%=cid%> extractEBCDICFieldUtil_<%=cid%>=new ExtractEBCDICFieldUtil_<%=cid%>();
<%
	}
}
%>

