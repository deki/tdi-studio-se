<%@ jet 
	imports="
        java.util.List
        java.util.Map
        
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
	" 
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	log4jFileUtil.componentStartInfo(node);
    String cid = node.getUniqueName();
    
	String filename = ElementParameterParser.getValue(node,"__FILENAME__");
	String copybook = ElementParameterParser.getValue(node,"__COPYBOOK__");
	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
	String customSetOriginalLengthStr = ElementParameterParser.getValue(node,"__NO_X2CJ_FILE__");
	boolean customSetOriginalLength = (customSetOriginalLengthStr!=null&&!("").equals(customSetOriginalLengthStr))?("true").equals(customSetOriginalLengthStr):true;
	List<Map<String, String>> trimSelects = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIMSELECT__");
	String isTrimAllStr = ElementParameterParser.getValue(node,"__TRIMALL__");
	boolean isTrimAll = (isTrimAllStr!=null&&!("").equals(isTrimAllStr))?("true").equals(isTrimAllStr):true;
	int schemaOptNum=100;
	String schemaOptNumStr=ElementParameterParser.getValue(node, "__SCHEMA_OPT_NUM__");
	if(schemaOptNumStr!=null && !"".equals(schemaOptNumStr) && !"\"\"".equals(schemaOptNumStr)){
		schemaOptNum  = Integer.parseInt(schemaOptNumStr);
	}
	boolean isOptimizeCode=false;

if(!customSetOriginalLength){//------11111
%>
	// open file
	javax.xml.bind.JAXBContext jaxbContext_<%=cid %> = javax.xml.bind.JAXBContext.newInstance("net.sf.cobol2j");
	javax.xml.bind.Unmarshaller unmarshaller_<%=cid %> = jaxbContext_<%=cid %>.createUnmarshaller();
	Object o_<%=cid %> = unmarshaller_<%=cid %>.unmarshal(new java.io.FileInputStream(<%= copybook %>));
	net.sf.cobol2j.FileFormat fF_<%=cid %> = (net.sf.cobol2j.FileFormat) o_<%=cid %>;
	net.sf.cobol2j.RecordSet rset_<%=cid %> = new net.sf.cobol2j.RecordSet(new java.io.FileInputStream(<%= filename %>), fF_<%=cid %>);
	java.util.Map recdefs_<%=cid %> = new net.sf.cobol2j.RecordsMap(fF_<%=cid %>);
	
	// read every record, for each record split into column definition
	List inrecord_<%=cid %>;
<%
		List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		List<Map<String, String>> schemas = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");
		for(Map<String, String> schemaMap : schemas) {
			String schemaName = schemaMap.get("SCHEMA");
			if(conns != null && conns.size() > 0){
				for(IConnection conn : conns){
					if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
						if(schemaName.equals(conn.getMetadataTable().getLabel())){
							IMetadataTable justMetadata = conn.getMetadataTable();
							List<IMetadataColumn> justColumnList = justMetadata.getListColumns();
							if(schemaOptNum<justColumnList.size()){
								isOptimizeCode=true;
							}
							break;
						}
					}
				}
			}
			if(isOptimizeCode){
				break;
			}
		}
	if(isOptimizeCode){
%>
	class EBCDICUtil_<%=cid%>{
<%
	
	for(Map<String, String> schemaMap : schemas) {//------AAA0
		String schemaName = schemaMap.get("SCHEMA");
		IConnection justConn = null; //------->get the right output connection--->to get the columns info
		if(conns != null && conns.size() > 0){
			for(IConnection conn : conns){
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
					if(schemaName.equals(conn.getMetadataTable().getLabel())){
						justConn = conn;
						break;
					}
				}
			}
		}

		if(justConn != null){//------BBB0
			IMetadataTable justMetadata = justConn.getMetadataTable();
			List<IMetadataColumn> justColumnList = justMetadata.getListColumns();
			int sizeListColumns = justColumnList.size();
				for (int valueN=0; valueN<sizeListColumns; valueN++) {
					IMetadataColumn column = justColumnList.get(valueN);
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					if(valueN%schemaOptNum==0){
%>
				public void getValue_<%=schemaName%>_<%=valueN/schemaOptNum%>(final <%=justConn.getName() %>Struct <%=justConn.getName() %>,List inrecord_<%=cid %>){
<%
					}
					if(javaType == JavaTypesManager.STRING){
%>
						<%=justConn.getName() %>.<%=column.getLabel()%> = (String)inrecord_<%=cid %>.get(<%=valueN%>);
<%
					}else{
%>
						<%=justConn.getName() %>.<%=column.getLabel()%> = (<%=javaType.getLabel() %>)inrecord_<%=cid %>.get(<%=valueN%>);
<%
					}
				    if((valueN+1)%schemaOptNum==0){
%>
					}
<%
					}
				}
				if(sizeListColumns>0&&(sizeListColumns%schemaOptNum)>0){
%>
				}
<%
				}
		}
	}
%>
	}
	EBCDICUtil_<%=cid%> ebcdicUtil_<%=cid%>=new EBCDICUtil_<%=cid%>();
<%
	}
%>
    <%if(isLog4jEnabled){%>
    	log.info("<%=cid%> - Retrieving records from file.");
    <%}%>
	while (rset_<%=cid %>.hasNext()){
		inrecord_<%=cid %> = rset_<%=cid %>.next();
		{
			
<%

    		if (conns!=null && conns.size()>0) {
				for (int i=0;i<conns.size();i++) {
					IConnection connTemp = conns.get(i);
					if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
%>
					<%=connTemp.getName() %> = null;			
<%
					}
				}
    		}
    		
	for(Map<String, String> schemaMap : schemas) {//------AAA0
		String schemaName = schemaMap.get("SCHEMA");
		String code = schemaMap.get("CODE");
	
		IConnection justConn = null; //------->get the right output connection--->to get the columns info
		if(conns != null && conns.size() > 0){
			for(IConnection conn : conns){
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
					if(schemaName.equals(conn.getMetadataTable().getLabel())){
						justConn = conn;
						break;
					}
				}
			}
		}

		if(justConn != null){//------BBB0
		IMetadataTable justMetadata = justConn.getMetadataTable();
		List<IMetadataColumn> justColumnList = justMetadata.getListColumns();
%>
			if(inrecord_<%=cid %>.get(0).equals("<%=code %>") || recdefs_<%=cid %>.size() == 1 ){
	
				<%=justConn.getName() %> = new <%=justConn.getName() %>Struct();
<%
				int sizeListColumns = justColumnList.size();
				for (int valueN=0; valueN<sizeListColumns; valueN++) {
					IMetadataColumn column = justColumnList.get(valueN);
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					if(!isOptimizeCode){
						if(javaType == JavaTypesManager.STRING){
%>				
						<%=justConn.getName() %>.<%=column.getLabel()%> = (String)inrecord_<%=cid %>.get(<%=valueN%>);
<%
						}else {
%>
						<%=justConn.getName() %>.<%=column.getLabel()%> = (<%=javaType.getLabel() %>)inrecord_<%=cid %>.get(<%=valueN%>);
<%
						}
					}else{
						if(valueN%schemaOptNum==0){
%>
						ebcdicUtil_<%=cid%>.getValue_<%=schemaName%>_<%=valueN/schemaOptNum%>(<%=justConn.getName() %>,inrecord_<%=cid %>);
<%
						}
					}
					if(isLog4jEnabled){%>
		               	log4jSb_<%=cid%>.append(<%=justConn.getName() %>.<%=column.getLabel()%> + "|");
					<%}
				}
%>	
			}	
<%
		}//------BBB0
	}//------AAA0
}else{//------11111
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	if(conns!=null && conns.size()>0){//------conns
		IConnection conn = conns.get(0);
			int totalRealSize = 0;
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {//--------AAA00
				IMetadataTable justMetadata = conn.getMetadataTable();
				List<IMetadataColumn> justColumnList = justMetadata.getListColumns();
				int sizeListColumns = justColumnList.size();
				if(schemaOptNum < sizeListColumns){
					isOptimizeCode=true;
				}
				for (int valueN=0; valueN<sizeListColumns; valueN++) {//------BBB00
					IMetadataColumn column = justColumnList.get(valueN);
					Integer orgainLength  = column.getOriginalLength();
					if(orgainLength==null || orgainLength.intValue()==0) {
%>
//////////////////////////////////////////////////
the original size in the column:<%=column.getLabel()%> should be bigger than 0
//////////////////////////////////////////////////
<%
						break;
					}
					totalRealSize = totalRealSize + orgainLength.intValue();
				}//------BBB00
			}//--------AAA00
%>
			java.io.FileInputStream fs_<%=cid %> = new java.io.FileInputStream(<%=filename %>);
			byte[] bb_row_<%=cid %> = new byte[<%=totalRealSize %>];
			java.nio.ByteBuffer bbRecord_<%=cid %> = null;
			int iReadOffset_<%=cid %> = 0;
<%
			if(isOptimizeCode){//------B01
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {//------B02
					IMetadataTable justMetadata = conn.getMetadataTable();
					List<IMetadataColumn> justColumnList = justMetadata.getListColumns();
					int sizeListColumns = justColumnList.size();
					if(sizeListColumns>0){
%>
					class EBCDICUtil_<%=cid%>{
<%
						for (int valueN=0; valueN<sizeListColumns; valueN++) {//------B02
							IMetadataColumn column = justColumnList.get(valueN);
							Integer orgainLength = column.getOriginalLength();
							String orgainType = column.getType();
							Integer precision = column.getPrecision();
							if(valueN%schemaOptNum==0){
%>
							public void getValue_<%=valueN/schemaOptNum%>(final <%=conn.getName()%>Struct <%=conn.getName() %>,java.nio.ByteBuffer bbRecord_<%=cid %>) throws java.lang.Exception{
<%
							}
							if(precision==null) precision = 0;
							if(orgainLength==null || orgainLength.intValue()==0 || orgainType==null || "".endsWith(orgainType.trim())) {
%>
//////////////////////////////////////////////////
the original size in the column:<%=column.getLabel()%> in the schema should be bigger than 0 and DB Type shouldn't be null or Empty
//////////////////////////////////////////////////
<%
								continue;
							}
%>
							byte[] bb_<%=column.getLabel()%>_<%=cid%> = new byte[<%=orgainLength %>];
							bbRecord_<%=cid %>.get(bb_<%=column.getLabel()%>_<%=cid%>);
<%
							if(orgainType.equals("X")){
%>				
								<%=conn.getName() %>.<%=column.getLabel()%> = new String(bb_<%=column.getLabel()%>_<%=cid%>,<%=encoding%>)<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(valueN).get("TRIM"))))?".trim()":"" %>;
<%
							}else if(orgainType.equals("1")) {
%>
								<%=conn.getName() %>.<%=column.getLabel()%> = new java.lang.Float(java.nio.ByteBuffer.wrap(bb_<%=column.getLabel()%>_<%=cid%>).order(java.nio.ByteOrder.BIG_ENDIAN).getFloat());
<%
							}else if(orgainType.equals("2")) {
%>
								<%=conn.getName() %>.<%=column.getLabel()%> = new java.lang.Double(java.nio.ByteBuffer.wrap(bb_<%=column.getLabel()%>_<%=cid%>).order(java.nio.ByteOrder.BIG_ENDIAN).getDouble());
<%
							}else if(orgainType.equals("3") || orgainType.equals("9")) {
								String isImpliedDecimalStr = column.getAdditionalField().get("ImpliedDecimal");
								boolean isImpliedDecimal = (isImpliedDecimalStr!=null&&!("").equals(isImpliedDecimalStr))?("true").equals(isImpliedDecimalStr):true;
								if(orgainType.equals("3")){
%>
									<%=conn.getName() %>.<%=column.getLabel()%> = cobolConversion.EBCDICType3.readType3Value(bb_<%=column.getLabel()%>_<%=cid%>,<%=precision %>,<%=isImpliedDecimal %>);
<%
								}else{
%>
									<%=conn.getName() %>.<%=column.getLabel()%> = cobolConversion.EBCDICType9.readType9Value(bb_<%=column.getLabel()%>_<%=cid%>,<%=precision %>,<%=isImpliedDecimal %>,<%=encoding %>);
<%
								}
							}else if(orgainType.equals("B")) {
%>
								<%=conn.getName() %>.<%=column.getLabel()%> = new java.math.BigDecimal(new java.math.BigInteger(bb_<%=column.getLabel()%>_<%=cid%>),0);
<%
							}else if (orgainType.equals("T")) {
%>
								<%=conn.getName() %>.<%=column.getLabel()%> = bb_<%=column.getLabel()%>_<%=cid%>;
<%
							}else {
%>
//////////////////////////////////////////////////
DB Type of the column:<%=column.getLabel()%> should be X, 1, 2, 3, 9, B, T
//////////////////////////////////////////////////
<%
							}
				    		if((valueN+1)%schemaOptNum==0){
%>
							}
<%
							}
						}//------B02
						if(sizeListColumns>0&&(sizeListColumns%schemaOptNum)>0){
%>
							}
<%
						}
%>
						}
						EBCDICUtil_<%=cid%> ebcdicUtil_<%=cid%>=new EBCDICUtil_<%=cid%>();
<%
					}
				}//------B02
			}//------B01
%>
		    <%if(isLog4jEnabled){%>
		    	log.info("<%=cid%> - Retrieving records from file.");
		    <%}%>
			while((iReadOffset_<%=cid %> = fs_<%=cid %>.read(bb_row_<%=cid %>))!= -1){
				bbRecord_<%=cid %> = java.nio.ByteBuffer.wrap(bb_row_<%=cid %>);
<%
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {//------BBB1
					IMetadataTable justMetadata = conn.getMetadataTable();
					List<IMetadataColumn> justColumnList = justMetadata.getListColumns();
					int sizeListColumns = justColumnList.size();
					for (int valueN=0; valueN<sizeListColumns; valueN++) {//------BBB12
						IMetadataColumn column = justColumnList.get(valueN);
						Integer orgainLength = column.getOriginalLength();
						String orgainType = column.getType();
						Integer precision = column.getPrecision();
						if(!isOptimizeCode){
							if(precision==null) precision = 0;
							if(orgainLength==null || orgainLength.intValue()==0 || orgainType==null || "".endsWith(orgainType.trim())) {
%>
//////////////////////////////////////////////////
the original size in the column:<%=column.getLabel()%> in the schema should be bigger than 0 and DB Type shouldn't be null or Empty
//////////////////////////////////////////////////
<%
								continue;
							}
%>
							byte[] bb_<%=column.getLabel()%>_<%=cid%> = new byte[<%=orgainLength %>];
							bbRecord_<%=cid %>.get(bb_<%=column.getLabel()%>_<%=cid%>);
<%
							if(orgainType.equals("X")){
%>				
								<%=conn.getName() %>.<%=column.getLabel()%> = new String(bb_<%=column.getLabel()%>_<%=cid%>,<%=encoding%>)<%=(isTrimAll || (!trimSelects.isEmpty() && ("true").equals(trimSelects.get(valueN).get("TRIM"))))?".trim()":"" %>;
<%
							}else if(orgainType.equals("1")) {
%>
								<%=conn.getName() %>.<%=column.getLabel()%> = new java.lang.Float(java.nio.ByteBuffer.wrap(bb_<%=column.getLabel()%>_<%=cid%>).order(java.nio.ByteOrder.BIG_ENDIAN).getFloat());
<%
							}else if(orgainType.equals("2")) {
%>
								<%=conn.getName() %>.<%=column.getLabel()%> = new java.lang.Double(java.nio.ByteBuffer.wrap(bb_<%=column.getLabel()%>_<%=cid%>).order(java.nio.ByteOrder.BIG_ENDIAN).getDouble());
<%
							}else if(orgainType.equals("3") || orgainType.equals("9")) {
								String isImpliedDecimalStr = column.getAdditionalField().get("ImpliedDecimal");
								boolean isImpliedDecimal = (isImpliedDecimalStr!=null&&!("").equals(isImpliedDecimalStr))?("true").equals(isImpliedDecimalStr):true;
								if(orgainType.equals("3")){
%>
									<%=conn.getName() %>.<%=column.getLabel()%> = cobolConversion.EBCDICType3.readType3Value(bb_<%=column.getLabel()%>_<%=cid%>,<%=precision %>,<%=isImpliedDecimal %>);
<%
								}else{
%>
									<%=conn.getName() %>.<%=column.getLabel()%> = cobolConversion.EBCDICType9.readType9Value(bb_<%=column.getLabel()%>_<%=cid%>,<%=precision %>,<%=isImpliedDecimal %>,<%=encoding %>);
<%
								}
							}else if(orgainType.equals("B")) {
%>
								<%=conn.getName() %>.<%=column.getLabel()%> = new java.math.BigDecimal(new java.math.BigInteger(bb_<%=column.getLabel()%>_<%=cid%>),0);
<%
							}else if (orgainType.equals("T")) {
%>
								<%=conn.getName() %>.<%=column.getLabel()%> = bb_<%=column.getLabel()%>_<%=cid%>;
<%
							}else {
%>
//////////////////////////////////////////////////
DB Type of the column:<%=column.getLabel()%> should be X, 1, 2, 3, 9, B, T
//////////////////////////////////////////////////
<%
							}
						}else{
							if(valueN%schemaOptNum==0){
%>
							ebcdicUtil_<%=cid%>.getValue_<%=valueN/schemaOptNum%>(<%=conn.getName() %>,bbRecord_<%=cid %>);
<%
							}
						}
						if(isLog4jEnabled){%>
			               	log4jSb_<%=cid%>.append(<%=conn.getName() %>.<%=column.getLabel()%> + "|");
						<%}
					}//------BBB12
			}//------BBB1
%>
				bbRecord_<%=cid %>.clear();
<%
	}//------conns
}//------11111
%>