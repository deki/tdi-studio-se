<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>

<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node,"__ACCESS_TOKEN__");
	    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";
		String dropboxPath = ElementParameterParser.getValue(node, "__PATH__");
		String outputFile = ElementParameterParser.getValue(node, "__OUTPUT__");
		String store2Local = ElementParameterParser.getValue(node, "__STORE_TO_LOCAL__");
		
		List<IMetadataTable> metadatas = node.getMetadataList();
		IMetadataTable metadata = null;
		if ((metadatas!=null)&&(metadatas.size()>0)) {
			metadata = metadatas.get(0);    
	    }
		
		List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
		
        String dataOutputConnection = null;	
	    for(IConnection conn : outputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataOutputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end
%>

<%
if(!"true".equals(useExistingConn)){
	String clientIdentifier = "\""+cid+"\"";
	String localeName = "\""+java.util.Locale.getDefault().toString()+"\"";
	
	String useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__");
	if("true".equals(useProxy)){
		String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
		String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
%>
		com.dropbox.core.DbxRequestConfig <%=cid%>_config = new com.dropbox.core.DbxRequestConfig(<%=clientIdentifier%>, <%=localeName%>
			,new com.dropbox.core.http.StandardHttpRequestor(new java.net.Proxy(java.net.Proxy.Type.HTTP, new java.net.InetSocketAddress(<%=proxyHost%>, <%=proxyPort%>))));
		com.dropbox.core.DbxClient <%=cid%>_client = new com.dropbox.core.DbxClient(<%=cid%>_config, <%=accessToken%>);
<%
	}else{
%>
	com.dropbox.core.DbxRequestConfig <%=cid%>_config = new com.dropbox.core.DbxRequestConfig(<%=clientIdentifier%>, <%=localeName%>);
	com.dropbox.core.DbxClient <%=cid%>_client = new com.dropbox.core.DbxClient(<%=cid%>_config, <%=accessToken%>);
<%
	}
}else{
%>
	com.dropbox.core.DbxClient <%=cid%>_client = (com.dropbox.core.DbxClient)globalMap.get(<%=connectionKey%>);
<%}%>
	com.dropbox.core.DbxEntry.WithChildren <%=cid%>_entries = <%=cid%>_client.getMetadataWithChildren(<%=dropboxPath%>);
	if (<%=cid%>_entries == null || <%=cid%>_entries.entry == null || !<%=cid%>_entries.entry.isFile()) {
		throw new Exception(<%=dropboxPath%> + " is not a valid file path on Dropbox");
	}
	
	<%if("true".equals(store2Local)){%>
		java.io.File <%=cid%>_outputFile = new java.io.File(<%=outputFile%>);
		if(!<%=cid%>_outputFile.getParentFile().exists()){
			<%=cid%>_outputFile.getParentFile().mkdirs();
		}
		java.io.FileOutputStream <%=cid%>_outputStream = null;
		try {
			<%=cid%>_outputStream = new java.io.FileOutputStream(<%=cid%>_outputFile);
			com.dropbox.core.DbxEntry.File downloadedFile = <%=cid%>_client.getFile(<%=cid%>_entries.entry.path,
		            null, <%=cid%>_outputStream);
		} finally {
			if(<%=cid%>_outputStream != null){
				try{
					<%=cid%>_outputStream.close();
				}catch(Exception e){
				}
			}
		}
		<%if(dataOutputConnection != null){%>
			<%=dataOutputConnection%>.content = new java.io.FileInputStream(<%=cid%>_outputFile);
			<%=dataOutputConnection%>.fileName = <%=cid%>_entries.entry.name;
		<%}%>
	<%}else{%>
		com.dropbox.core.DbxClient.Downloader <%=cid%>_downloader = <%=cid%>_client.startGetFile(<%=cid%>_entries.entry.path, null);
		<%if(dataOutputConnection != null){%>
			if (<%=cid%>_downloader != null) {
				<%=dataOutputConnection%>.content = <%=cid%>_downloader.body;
				<%=dataOutputConnection%>.fileName = <%=cid%>_entries.entry.name;
			}
		<%}%>
	<%}%>