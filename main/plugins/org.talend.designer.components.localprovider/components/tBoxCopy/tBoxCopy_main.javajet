<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
	<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node, "__ACCESS_TOKEN__");
		String expiresIn = ElementParameterParser.getValue(node, "__EXPIRES_IN__");
		String refreshToken = ElementParameterParser.getValue(node, "__REFRESH_TOKEN__");
		String tokenType = ElementParameterParser.getValue(node, "__TOKEN_TYPE__");
		
		String clientId = ElementParameterParser.getValue(node, "__CLIENT_ID__");
		String clientSecret = ElementParameterParser.getValue(node, "__CLIENT_SECRET__");
		
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";
		
		String fileName = ElementParameterParser.getValue(node, "__FILE_NAME__");
		boolean moveDirectory = "true".equals(ElementParameterParser.getValue(node, "__MOVE_DIRECTORY__"));
		String sourceDirectory = ElementParameterParser.getValue(node, "__SOURCE_DIRECTORY__");
		String destinationDirectory = ElementParameterParser.getValue(node, "__DESTINATION_DIRECTORY__");
		boolean rename = "true".equals(ElementParameterParser.getValue(node, "__RENAME__"));
		String destinationFileName = ElementParameterParser.getValue(node, "__DESTINATION_FILE_NAME__");
		boolean removeSource = "true".equals(ElementParameterParser.getValue(node, "__REMOVE_SOURCE_FILE__"));
		
		boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
		
		final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
				log4jFileUtil.componentStartInfo(node);
				
		List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
		
        String dataOutputConnection = null;	
	    for(IConnection conn : outputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataOutputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end
%>
<%
if(!"true".equals(useExistingConn)){
	String useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__");
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
%>
	com.box.boxjavalibv2.BoxRESTClient <%=cid%>_httpClient = new com.box.boxjavalibv2.BoxRESTClient();
<%
	if("true".equals(useProxy)){
%>   
		<%=cid%>_httpClient.setConnectionTimeOut(3000);
		org.apache.http.HttpHost <%=cid%>_proxy = new org.apache.http.HttpHost(<%=proxyHost%>, <%=proxyPort%>, "http");
		org.apache.http.client.HttpClient <%=cid%>_cl = <%=cid%>_httpClient.getRawHttpClient();
		<%=cid%>_cl.getParams().setParameter(org.apache.http.conn.params.ConnRoutePNames.DEFAULT_PROXY, <%=cid%>_proxy);
<%
	}else{
%>
<%
	}
%>
	com.box.boxjavalibv2.BoxClient <%=cid%>_client = new com.box.boxjavalibv2.BoxClient(<%=clientId%>, <%=clientSecret%>, null, null, <%=cid%>_httpClient, new com.box.boxjavalibv2.BoxConfigBuilder().build());
	java.util.Map<String, Object> <%=cid%>_map = new java.util.HashMap<String, Object>();
    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_ACCESS_TOKEN, <%=accessToken%>);
    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_EXPIRES_IN, <%=expiresIn%>);
    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_REFRESH_TOKEN, <%=refreshToken%>);
    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_TOKEN_TYPE, <%=tokenType%>);
      
    <%=cid%>_client.authenticate(new com.box.boxjavalibv2.dao.BoxOAuthToken(<%=cid%>_map));
    <%=cid%>_client.getOAuthDataController().setAutoRefreshOAuth(true);
<%
	} else {
%>
	com.box.boxjavalibv2.BoxClient <%=cid%>_client = (com.box.boxjavalibv2.BoxClient)globalMap.get(<%=connectionKey%>);
<%
}
%>
	String <%=cid%>_filePath = normalizePath(<%=fileName%>);
	boolean <%=cid%>_hasError = false;
	String <%=cid%>_fileName = getFolderFromPath(<%=cid%>_filePath);
	String <%=cid%>_destinationFolderPath = normalizePath(<%=destinationDirectory%>);
	String <%=cid%>_destinationFolderName = getFolderFromPath(<%=cid%>_destinationFolderPath);
	com.box.boxjavalibv2.dao.BoxFile <%=cid%>_boxFile = null;
	com.box.boxjavalibv2.dao.BoxFile <%=cid%>_boxFileNew = null;
	com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_boxFolderTo = null;
	com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_boxFolderFrom = null;
	
	try
	{
		<%=cid%>_boxFolderTo = searchFolder(<%=cid%>_client, <%=cid%>_destinationFolderPath, <%=cid%>_destinationFolderName);
		if (<%=cid%>_boxFolderTo == null)
			throw new Exception("No destination folder found under path " + <%=cid%>_destinationFolderPath);
		System.out.println("Destination Folder Found - " + <%=cid%>_boxFolderTo.getName());
	}
	catch (java.lang.Exception e)
	{
<%
		if(dieOnError) {
%>
			throw e;
<%
		} else {
%>
<%
			if(isLog4jEnabled){
%>
				log.error("<%=cid%> - " +e.getMessage());
<%
			}
%>
			System.err.println(e);
<%
		}
%>
	}
<%
	if(moveDirectory)
	{
%>
		String <%=cid%>_sourceFolderPath = normalizePath(<%=sourceDirectory%>);
		String <%=cid%>_sourceFolderName = getFolderFromPath(<%=cid%>_sourceFolderPath);
		
		try
		{
			<%=cid%>_boxFolderFrom = searchFolder(<%=cid%>_client, <%=cid%>_sourceFolderPath, <%=cid%>_sourceFolderName);
			if (<%=cid%>_boxFolderFrom == null)
				throw new Exception("No source folder found under path " + <%=cid%>_sourceFolderPath);
			System.out.println("Source Folder Found - " + <%=cid%>_boxFolderFrom.getName());
		}
		catch (java.lang.Exception e)
		{
<%
			if(dieOnError) {
%>
				throw e;
<%
			} else {
%>
<%
				if(isLog4jEnabled){
%>
					log.error("<%=cid%> - " +e.getMessage());
<%
				}
%>
				System.err.println(e);
<%
			}
%>
		}
		if (<%=cid%>_boxFolderTo != null && <%=cid%>_boxFolderFrom != null)
		{
			try
			{
				com.box.boxjavalibv2.requests.requestobjects.BoxFolderRequestObject fRequest = com.box.boxjavalibv2.requests.requestobjects.BoxFolderRequestObject.createFolderRequestObject(<%=cid%>_boxFolderFrom.getName(), <%=cid%>_boxFolderTo.getId());
        		<%=cid%>_boxFolderFrom = <%=cid%>_client.getFoldersManager().updateFolderInfo(<%=cid%>_boxFolderFrom.getId(), fRequest);
			}
			catch (java.lang.Exception e)
			{
<%
				if(dieOnError) {
%>
					throw e;
<%
				} else {
%>
<%
					if(isLog4jEnabled){
%>
						log.error("<%=cid%> - " +e.getMessage());
<%
						}
%>
					System.err.println(e);
<%
				}
%>
			}
		}
<%	
	}
%>
<%
	else
	{
%>
		com.box.restclientv2.requestsbase.BoxDefaultRequestObject <%=cid%>_requestObject = new com.box.restclientv2.requestsbase.BoxDefaultRequestObject();
		System.out.println("Searching for file " + <%=cid%>_filePath);
		try
		{
			<%=cid%>_boxFile = searchFile(<%=cid%>_client, <%=cid%>_filePath, <%=cid%>_fileName);
			if (<%=cid%>_boxFile == null)
				throw new Exception("No file found with path " + <%=cid%>_filePath);
			System.out.println("Found file at " + <%=cid%>_filePath);
		}
		catch (java.lang.Exception e)
		{
<%
			if(dieOnError) {
%>
				throw e;
<%
			} else {
%>
<%
				if(isLog4jEnabled){
%>
					log.error("<%=cid%> - " +e.getMessage());
<%
				}
%>
				System.err.println(e);
<%
			}
%>
		}
		if (<%=cid%>_boxFolderTo != null)
		{
			try
			{
				String <%=cid%>_boxFilePath = getBoxItemPath(<%=cid%>_boxFile);
				// Check for not ot copy in the same directory
				if(!getBoxItemPath(<%=cid%>_boxFile).equals(getBoxItemPath(<%=cid%>_boxFolderTo) + <%=cid%>_boxFolderTo.getName()))
				{
					com.box.boxjavalibv2.requests.requestobjects.BoxItemCopyRequestObject <%=cid%>_copyObject = com.box.boxjavalibv2.requests.requestobjects.BoxItemCopyRequestObject.copyItemRequestObject(<%=cid%>_boxFolderTo.getId());
		    		<%=cid%>_boxFileNew = <%=cid%>_client.getFilesManager().copyFile(<%=cid%>_boxFile.getId(), <%=cid%>_copyObject);
<%					if(removeSource)
					{
%>
					<%=cid%>_client.getFilesManager().deleteFile(<%=cid%>_boxFile.getId(), null);
<%		
					}
%>
		    	}
<%			if(rename)
			{
%>
				com.box.boxjavalibv2.requests.requestobjects.BoxFileRequestObject <%=cid%>_fileRequestObject = new com.box.boxjavalibv2.requests.requestobjects.BoxFileRequestObject();
        		<%=cid%>_fileRequestObject.setName(<%=destinationFileName%>);
        		if (<%=cid%>_boxFileNew != null)
        			<%=cid%>_boxFileNew = <%=cid%>_client.getFilesManager().updateFileInfo(<%=cid%>_boxFileNew.getId(), <%=cid%>_fileRequestObject);
        		else
        			<%=cid%>_boxFileNew = <%=cid%>_client.getFilesManager().updateFileInfo(<%=cid%>_boxFile.getId(), <%=cid%>_fileRequestObject);
<%		
			}
%>
		    }
			catch (java.lang.Exception e)
			{
<%
				if(dieOnError) {
%>
					throw e;
<%
				} else {
%>
<%
					if(isLog4jEnabled){
%>
						log.error("<%=cid%> - " +e.getMessage());
<%
					}
%>
					System.err.println(e);
<%
				}
%>
			}        
		}
<%
	}
%>

	//System.out.println(<%=cid%>_client.getAuthData().getRefreshToken());
    //System.out.println(<%=cid%>_client.getAuthData().getAccessToken());
    
<%
		if(dataOutputConnection != null) {
%>
		if (<%=cid%>_boxFileNew != null)
    	{
			<%=dataOutputConnection%>.destinationFilePath = getBoxItemPath(<%=cid%>_boxFileNew);
			<%=dataOutputConnection%>.destinationFileName = <%=cid%>_boxFileNew.getName();
		}
		if (<%=cid%>_boxFile != null)
    	{
			<%=dataOutputConnection%>.sourceDirectory = getBoxItemPath(<%=cid%>_boxFile);
		}
		else if (<%=cid%>_boxFolderFrom != null)
		{
			<%=dataOutputConnection%>.sourceDirectory = getBoxItemPath(<%=cid%>_boxFolderFrom);
		}
		if (<%=cid%>_boxFileNew != null)
		{
			<%=dataOutputConnection%>.destinationDirectory = getBoxItemPath(<%=cid%>_boxFileNew);
		}
		else if (<%=cid%>_boxFolderTo != null)
		{
			<%=dataOutputConnection%>.destinationDirectory = getBoxItemPath(<%=cid%>_boxFolderTo);
		}
<%
		}
%>
    	if (<%=cid%>_boxFileNew != null)
    	{
			globalMap.put("<%=cid%>_DESTINATION_FILEPATH", getBoxItemPath(<%=cid%>_boxFileNew));
			globalMap.put("<%=cid%>_DESTINATION_FILENAME", <%=cid%>_boxFileNew.getName());
		}
		if (<%=cid%>_boxFile != null)
    	{
			globalMap.put("<%=cid%>_SOURCE_DIRECTORY", getBoxItemPath(<%=cid%>_boxFile));
		}
		else if (<%=cid%>_boxFolderFrom != null)
		{
			globalMap.put("<%=cid%>_SOURCE_DIRECTORY", getBoxItemPath(<%=cid%>_boxFolderFrom));
		}
		if (<%=cid%>_boxFileNew != null)
		{
			globalMap.put("<%=cid%>_DESTINATION_DIRECTORY", getBoxItemPath(<%=cid%>_boxFileNew));
		}
		else if (<%=cid%>_boxFolderTo != null)
		{
			globalMap.put("<%=cid%>_DESTINATION_DIRECTORY", getBoxItemPath(<%=cid%>_boxFolderTo));
		}

	//}			