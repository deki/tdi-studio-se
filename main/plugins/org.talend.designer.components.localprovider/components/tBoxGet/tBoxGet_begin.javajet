<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
	<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node, "__ACCESS_TOKEN__");
		String expiresIn = ElementParameterParser.getValue(node, "__EXPIRES_IN__");
		String refreshToken = ElementParameterParser.getValue(node, "__REFRESH_TOKEN__");
		String tokenType = ElementParameterParser.getValue(node, "__TOKEN_TYPE__");
		
		String clientId = ElementParameterParser.getValue(node, "__CLIENT_ID__");
		String clientSecret = ElementParameterParser.getValue(node, "__CLIENT_SECRET__");
		
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";
		
		String boxPath = ElementParameterParser.getValue(node, "__PATH__");
		String outputFolder = ElementParameterParser.getValue(node, "__OUTPUT__");
		String storeToLocal = ElementParameterParser.getValue(node, "__STORE_TO_LOCAL__");
		boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
		
		final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
				log4jFileUtil.componentStartInfo(node);
        String dataOutputConnection = null;
	    
		List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
	    for(IConnection conn : outputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataOutputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end
%>
<%
if(!"true".equals(useExistingConn)){
	String useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__");
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
%>
	com.box.boxjavalibv2.BoxRESTClient <%=cid%>_httpClient = new com.box.boxjavalibv2.BoxRESTClient();
<%
	if("true".equals(useProxy)){
%>   
		<%=cid%>_httpClient.setConnectionTimeOut(3000);
		org.apache.http.HttpHost <%=cid%>_proxy = new org.apache.http.HttpHost(<%=proxyHost%>, <%=proxyPort%>, "http");
		org.apache.http.client.HttpClient <%=cid%>_cl = <%=cid%>_httpClient.getRawHttpClient();
		<%=cid%>_cl.getParams().setParameter(org.apache.http.conn.params.ConnRoutePNames.DEFAULT_PROXY, <%=cid%>_proxy);
<%
	}else{
%>
<%
	}
%>
	com.box.boxjavalibv2.BoxClient <%=cid%>_client = new com.box.boxjavalibv2.BoxClient(<%=clientId%>, <%=clientSecret%>, null, null, <%=cid%>_httpClient, new com.box.boxjavalibv2.BoxConfigBuilder().build());
	java.util.Map<String, Object> <%=cid%>_map = new java.util.HashMap<String, Object>();
    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_ACCESS_TOKEN, <%=accessToken%>);
    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_EXPIRES_IN, <%=expiresIn%>);
    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_REFRESH_TOKEN, <%=refreshToken%>);
    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_TOKEN_TYPE, <%=tokenType%>);
      
    <%=cid%>_client.authenticate(new com.box.boxjavalibv2.dao.BoxOAuthToken(<%=cid%>_map));
    <%=cid%>_client.getOAuthDataController().setAutoRefreshOAuth(true);
<%
	} else {
%>
	com.box.boxjavalibv2.BoxClient <%=cid%>_client = (com.box.boxjavalibv2.BoxClient)globalMap.get(<%=connectionKey%>);
<%
}
%>
	String <%=cid%>_path = normalizePath(<%=boxPath%>);
	boolean <%=cid%>_hasError = false;
	String <%=cid%>_name = getFolderFromPath(<%=cid%>_path);

	com.box.boxjavalibv2.dao.BoxFile <%=cid%>_boxFile = null;
	com.box.restclientv2.requestsbase.BoxDefaultRequestObject <%=cid%>_requestObject = new com.box.restclientv2.requestsbase.BoxDefaultRequestObject();
	//System.out.println("Searching for file in " + <%=cid%>_path);
	try
	{
		com.box.boxjavalibv2.dao.BoxCollection <%=cid%>_searchResults = <%=cid%>_client.getSearchManager().search(<%=cid%>_name, <%=cid%>_requestObject);
		for (com.box.boxjavalibv2.dao.BoxTypedObject <%=cid%>_entry : <%=cid%>_searchResults.getEntries())
		{
			if (<%=cid%>_entry instanceof com.box.boxjavalibv2.dao.BoxFile && ((com.box.boxjavalibv2.dao.BoxFile) <%=cid%>_entry).getName().equals(<%=cid%>_name))
			{
				if (<%=cid%>_path == null || <%=cid%>_path.isEmpty())
				{
					<%=cid%>_boxFile = ((com.box.boxjavalibv2.dao.BoxFile) <%=cid%>_entry);
					break;
				}
				java.lang.StringBuilder <%=cid%>_sBuilder = new java.lang.StringBuilder();
				for (com.box.boxjavalibv2.dao.BoxTypedObject <%=cid%>_obj : ((com.box.boxjavalibv2.dao.BoxFile) <%=cid%>_entry).getPathCollection().getEntries())
				{
					<%=cid%>_sBuilder.append(<%=cid%>_obj.getValue("name") + "/");
				}
				<%=cid%>_sBuilder.append(((com.box.boxjavalibv2.dao.BoxFile) <%=cid%>_entry).getName());
				//System.out.println("FOUND - " + <%=cid%>_sBuilder.toString());
				//System.out.println("NEED - " + <%=cid%>_path);
				if (<%=cid%>_sBuilder.toString().equals(<%=cid%>_path))
				{
					<%=cid%>_boxFile = (com.box.boxjavalibv2.dao.BoxFile) <%=cid%>_entry;
					break;
				}
			}
			else if (<%=cid%>_entry instanceof com.box.boxjavalibv2.dao.BoxFolder && ((com.box.boxjavalibv2.dao.BoxFolder) <%=cid%>_entry).getName().equals(<%=cid%>_name))
			{
				java.lang.StringBuilder <%=cid%>_sBuilder = new java.lang.StringBuilder();
				for (com.box.boxjavalibv2.dao.BoxTypedObject <%=cid%>_obj : ((com.box.boxjavalibv2.dao.BoxFolder) <%=cid%>_entry).getPathCollection().getEntries())
				{
					<%=cid%>_sBuilder.append(<%=cid%>_obj.getValue("name") + "/");
				}
				<%=cid%>_sBuilder.append(((com.box.boxjavalibv2.dao.BoxFolder) <%=cid%>_entry).getName());
				if (<%=cid%>_sBuilder.toString().equals(<%=cid%>_path))
				{
<%
					if(dieOnError) {
%>
						throw new Exception(<%=boxPath%> + " exists but is a directory");
<%
					} else {
%>
<%
						if(isLog4jEnabled){
%>
							log.error(<%=boxPath%> + " exists but is a directory");
<%
						}
%>
						System.err.println(<%=boxPath%> + " exists but is a directory");
<%
					}
%>					
					<%=cid%>_hasError = true;
				}
			}
		}
	}
	catch (java.lang.Exception e)
	{
<%
		if(dieOnError) {
%>
			throw e;
<%
		} else {
%>
<%
			if(isLog4jEnabled){
%>
				log.error("<%=cid%> - " +e.getMessage());
<%
			}
%>
			System.err.println(e);
<%
		}
%>
	}
	//System.out.println(<%=cid%>_client.getAuthData().getRefreshToken());
    //System.out.println(<%=cid%>_client.getAuthData().getAccessToken());
	if (<%=cid%>_boxFile == null && !<%=cid%>_hasError) {
<%
		if(dieOnError) {
%>
			throw new Exception("No file found in " + <%=boxPath%>);
<%
		} else {
%>
<%
			if(isLog4jEnabled){
%>
				log.error("<%=cid%> - " + "No file found in " + <%=boxPath%>);
<%
			}
%>
			System.err.println("No file found in " + <%=boxPath%>);
<%
		}
%>
	} else if (<%=cid%>_boxFile == null && <%=cid%>_hasError) {
	//Do Nothing, error already occured
	} else {
		java.io.OutputStream <%=cid%>_fos = null;
		java.io.InputStream <%=cid%>_bais = null;
		try {
<% if("true".equals(storeToLocal)) { %>
		    java.io.File <%=cid%>_f = new java.io.File(<%=outputFolder%>);
			if (!<%=cid%>_f.exists())
			{
				<%=cid%>_f.mkdirs();
			}
			String <%=cid%>_outputPath = <%=cid%>_f.getAbsolutePath() + java.io.File.separator + <%=cid%>_boxFile.getName();
			<%=cid%>_fos = new java.io.FileOutputStream(<%=cid%>_outputPath);
			<%=cid%>_client.getFilesManager().downloadFile(<%=cid%>_boxFile.getId(), new java.io.OutputStream[] {<%=cid%>_fos}, null, new com.box.restclientv2.requestsbase.BoxDefaultRequestObject());
			globalMap.put("<%=cid %>_OUTPUT_PATH",<%=cid%>_outputPath);
<%} else {%>
			<%=cid%>_fos = new java.io.ByteArrayOutputStream();
			<%=cid%>_client.getFilesManager().downloadFile(<%=cid%>_boxFile.getId(), new java.io.OutputStream[] {<%=cid%>_fos}, null, new com.box.restclientv2.requestsbase.BoxDefaultRequestObject());
			((ByteArrayOutputStream) <%=cid%>_fos).flush();
			((ByteArrayOutputStream) <%=cid%>_fos).close();
			<%=cid%>_bais = new java.io.ByteArrayInputStream(((ByteArrayOutputStream) <%=cid%>_fos).toByteArray());
<%if(dataOutputConnection != null){%>
			<%=dataOutputConnection%>.fileName = <%=cid%>_boxFile.getName();
			<%=dataOutputConnection%>.content = <%=cid%>_bais;	
<%} else {%>
			globalMap.put("<%=cid %>_INPUT_STREAM", <%=cid%>_bais);
<%}
}%>
			
		} catch (java.lang.Exception e) {
<%
			if(dieOnError) {
%>
				throw e;
<%
			} else {
%>
<%
				if(isLog4jEnabled){
%>
					log.error("<%=cid%> - " + e.getMessage());
<%
				}
%>
				System.err.println("<%=cid%> - " + e.getMessage());
<%
			}
%>
		} finally {
			if(<%=cid%>_fos != null){
				try {
					<%=cid%>_fos.close();
				} catch (java.io.IOException e) {
					// Ignore
				}
			}
		}
	
		
		
	}	
			