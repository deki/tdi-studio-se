<%@ jet 
imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
	" 
%>

<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>

<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();

        // component id        
        String cid = node.getUniqueName();
        String wrap = ElementParameterParser.getValue(node, "__WRAP__");
        String filename = ElementParameterParser.getValue(node, "__FILENAME__");
        String encoding = ElementParameterParser.getValue(node,"__ENCODING__");       
        boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
        
        log4jFileUtil.componentStartInfo(node);
%>

java.io.File file_<%=cid %> = new java.io.File(<%=filename %>); 
boolean isFileGenerated_<%=cid %> = true;
<%
		if(isAppend){
%>
if(file_<%=cid %>.exists()){
	isFileGenerated_<%=cid %> = false;
}
<%
		}
if(("true").equals(ElementParameterParser.getValue(node,"__CREATE__"))){
%>
//create directory only if not exists
 java.io.File parentFile_<%=cid%> = file_<%=cid %>.getParentFile();  
 	if(parentFile_<%=cid%> != null && !parentFile_<%=cid%>.exists()) {  
 	   parentFile_<%=cid%>.mkdirs();
 	} 
<%}%>	
		    class Util_<%=cid %>
            {
                public void breakString( StringBuilder pw, String value, int max) {
                    int leftToGo = value.length();
                    int written = 0;
                    int maxChars = max;
                    while( leftToGo > 0 ) {
                        int toWrite = Math.min( maxChars, leftToGo );
                        String s = value.substring( written, written+toWrite);
                        if ( written != 0 ) {
                        	pw.append( " " + s );
                        } else {
                        	pw.append( s );
                            maxChars -= 1;
                        }
                        written += toWrite;
                        leftToGo -= toWrite;
                        pw.append( '\n' );
                    }
                }
                
                public String getBase64StringOrNot(boolean encodingBase64,String srcData,String encoding){
                	String returnValue = "";
                	try {
						if(encodingBase64 && !netscape.ldap.util.LDIF.isPrintable(srcData.getBytes(encoding))){
							returnValue = org.apache.commons.codec.binary.Base64.encodeBase64String(srcData.getBytes(encoding));
						}else{
							returnValue = srcData; 
						}
					}catch(java.lang.Exception e){
						e.printStackTrace();
					}	
					return returnValue;
                } 
            } 
            
		Util_<%=cid %> util_<%=cid %> = new Util_<%=cid %>();
		
		int nb_line_<%=cid %> = 0;
		final String dn_<%=cid %> = "dn: ";
		final String changetype_<%=cid %> = "changetype: ";
		final int wrap_<%=cid %> = <%=wrap %>;
<%if(!isAppend){%>
       	java.io.PrintWriter pw_<%=cid %> = new java.io.PrintWriter(file_<%=cid %>, <%= encoding%>);
<%}else{%>
		java.io.PrintWriter pw_<%=cid %> = new java.io.PrintWriter
										(new java.io.BufferedWriter
										(new java.io.OutputStreamWriter
										(new java.io.FileOutputStream
										(file_<%=cid %>,true),<%= encoding%>)),false);
<%}%>

if(file_<%=cid %>.length()==0){
	pw_<%=cid %>.write("version: 1\n");
}
